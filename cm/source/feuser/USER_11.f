      SUBROUTINE USER_11(NODENVCB,NPNODE,nr,NVCB,NVCNODE,SIMTIME,XP,
     '  ERROR,*)

C#### Subroutine: USER_11
C###  Description:
C###    Moves boundaries for fe60 problems

C This USER_11 is for the VAD diaphragm motion.

      IMPLICIT NONE
      INCLUDE 'b00.cmn'
      INCLUDE 'b12.cmn'
      INCLUDE 'fluid00.cmn'
      INCLUDE 'geom00.cmn'
      INCLUDE 'loc00.cmn'
      INCLUDE 'loc00.inc'
      INCLUDE 'voro00.inc'
!     Parameter List
      INTEGER NODENVCB(NVCBM),NPNODE(0:NP_R_M,0:NRM),nr,
     '  NVCB(-1:3,NVCBM),NVCNODE(2,NP_R_M)
      REAL*8 SIMTIME,XP(NKM,NVM,NJM,NPM)
      CHARACTER ERROR*(*)
!     Local Variables
      INTEGER NDRIVING,NDRVSTART,NSPLINE
      PARAMETER (NDRIVING=1741,NDRVSTART=3367,NSPLINE=42)
      INTEGER i,bnp,bnonode,ibnp,ibnonode,bnvc,nj,njj,INDX1,INDX3
      REAL*8 BD
      PARAMETER (BD=0.12729428123839667d0)
      REAL*8 DIAS_POINTS(NSPLINE*3),SYS_POINTS(NSPLINE*3),
     '  SPLPARA(NDRIVING),TSPLINE(NSPLINE),SYS_RSPLINE(NSPLINE),
     '  SYS_ZSPLINE(NSPLINE),DIAS_RSPLINE(NSPLINE),
     '  DIAS_ZSPLINE(NSPLINE),RSPLINE(NSPLINE),ZSPLINE(NSPLINE),
     '  R2SPLINE(NSPLINE),Z2SPLINE(NSPLINE),AMPLITUDE,RATIO,BC1,BC2,
     '  OLDTT,TT,R,XGRAD,RGRAD,ZGRAD,POS(3),MAG,NORMAL1(3),
     '  THETA1,COSTHETA1,SINTHETA1,DIST,OLDB(3),OLDIB(3)

      DATA DIAS_POINTS/   0.d0, 0.d0, -2.12834482983590112d0,
     '  0.108384689162965384d0, 0.d0, -2.12695549528913830d0,
     '  0.216698153012455791d0, 0.d0, -2.12278840465408392d0,
     '  0.324869213040916482d0, 0.d0, -2.11584629634646060d0,
     '  0.432826784321878322d0, 0.d0, -2.10613373239291768d0,
     '  0.540499922223622975d0, 0.d0, -2.09365709543308443d0,
     '  0.647817869030654303d0, 0.d0, -2.07842458452519852d0,
     '  0.754710100442335441d0, 0.d0, -2.06044620975807335d0,
     '  0.861106371918139657d0, 0.d0, -2.03973378567293562d0,
     '  0.966936764839053220d0, 0.d0, -2.01630092349946910d0,
     '  1.07213173245479920d0,  0.d0, -1.99016302221115238d0,
     '  1.17662214558668654d0,  0.d0, -1.96133725840577999d0,
     '  1.28033933805605127d0,  0.d0, -1.92984257501781165d0,
     '  1.38321515180843480d0,  0.d0, -1.89569966886996699d0,
     '  1.48518198170384719d0,  0.d0, -1.85893097707224841d0,
     '  1.58617281994368287d0,  0.d0, -1.81956066227732971d0,
     '  1.68612130010508832d0,  0.d0, -1.77761459680199829d0,
     '  1.78496174075385028d0,  0.d0, -1.73312034562508632d0,
     '  1.88262918860714290d0,  0.d0, -1.68610714827306563d0,
     '  1.97905946121776344d0,  0.d0, -1.63660589960520864d0,
     '  2.07418918915181605d0,  0.d0, -1.58464912951093995d0,
     '  2.16795585763211918d0,  0.d0, -1.53027098153272534d0,
     '  2.26029784761997155d0,  0.d0, -1.47350719042854550d0,
     '  2.35115447630828545d0,  0.d0, -1.41439505868869442d0,
     '  2.44046603699946552d0,  0.d0, -1.35297343202233744d0,
     '  2.52817383834184284d0,  0.d0, -1.28928267382994610d0,
     '  2.61422024289886501d0,  0.d0, -1.22336463867836698d0,
     '  2.69854870502570643d0,  0.d0, -1.15526264479597374d0,
     '  2.78110380802840096d0,  0.d0, -1.08502144560596725d0,
     '  2.86183130058108404d0,  0.d0, -1.01268720031653303d0,
     '  2.94067813237741271d0,  0.d0, -0.938307443587184098d0,
     '  3.01759248899272237d0,  0.d0, -0.861931054291220633d0,
     '  3.09252382593403263d0,  0.d0, -0.783608223394837378d0,
     '  3.16542290185550357d0,  0.d0, -0.703390420973982522d0,
     '  3.23624181091752972d0,  0.d0, -0.621330362390649982d0,
     '  3.30493401426820554d0,  0.d0, -0.537481973650823508d0,
     '  3.37145437062646192d0,  0.d0, -0.451900355966847689d0,
     '  3.43575916594679409d0,  0.d0, -0.364641749547504557d0,
     '  3.49780614214607199d0,  0.d0, -0.275763496639597760d0,
     '  3.55755452487356250d0,  0.d0, -0.185324003845326934d0,
     '  3.61496505030591297d0,  0.d0, -0.933827037402216731d-1,
     '  3.66999999094948803d0,  0.d0,  0.d0/
      DATA SYS_POINTS/    0.d0, 0.d0,  1.65254271896378535d0,
     '  0.106666944030844299d0, 0.d0,  1.65102639554754771d0,
     '  0.213247689447599115d0, 0.d0,  1.64647865046847985d0,
     '  0.319656096821190006d0, 0.d0,  1.63890315908613093d0,
     '  0.425806171639948106d0, 0.d0,  1.62830604363445541d0,
     '  0.531612128036289988d0, 0.d0,  1.61469586827814848d0,
     '  0.636988448821570352d0, 0.d0,  1.59808363380488605d0,
     '  0.741849990852903929d0, 0.d0,  1.57848276280660027d0,
     '  0.846112001198088048d0, 0.d0,  1.55590909705385894d0,
     '  0.949690219637832067d0, 0.d0,  1.53038087962634517d0,
     '  1.05250093855747040d0,  0.d0,  1.50191874134705672d0,
     '  1.15446107060463543d0,  0.d0,  1.47054568411040965d0,
     '  1.25548820659919236d0,  0.d0,  1.43628706557540187d0,
     '  1.35550071935589611d0,  0.d0,  1.39917056574960519d0,
     '  1.45441777345117851d0,  0.d0,  1.35922618369043313d0,
     '  1.55215942826973397d0,  0.d0,  1.31648620076250578d0,
     '  1.64864669311558565d0,  0.d0,  1.27098515761834041d0,
     '  1.74380159104759525d0,  0.d0,  1.22275982628384994d0,
     '  1.83754721425471024d0,  0.d0,  1.17184918473167499d0,
     '  1.92980781728695128d0,  0.d0,  1.11829436819631756d0,
     '  2.02050883086003807d0,  0.d0,  1.06213866171351778d0,
     '  2.10957695425667557d0,  0.d0,  1.00342744796092997d0,
     '  2.19694020639312404d0,  0.d0,  0.942208174869455961d0,
     '  2.28252798398988066d0,  0.d0,  0.878530317277727013d0,
     '  2.36627111156558811d0,  0.d0,  0.812445342687486916d0,
     '  2.44810192569841423d0,  0.d0,  0.744006646966181795d0,
     '  2.52795428701988811d0,  0.d0,  0.673269544874880999d0,
     '  2.60576366222415778d0,  0.d0,  0.600291203159546538d0,
     '  2.68146716905691429d0,  0.d0,  0.525130599841365342d0,
     '  2.75500362713432168d0,  0.d0,  0.447848476553239505d0,
     '  2.82631360114198937d0,  0.d0,  0.368507296600925127d0,
     '  2.89533947392098723d0,  0.d0,  0.287171166217939311d0,
     '  2.96202545535198691d0,  0.d0,  0.203905824660223917d0,
     '  3.02631765262516428d0,  0.d0,  0.118778563468269607d0,
     '  3.08816410748503856d0,  0.d0,  0.318581789076482769d-1,
     '  3.14766704543018028d0,  0.d0, -0.566834359109125233d-1,
     '  3.22304100242040326d0,  0.d0, -0.131384465292320896d0,
     '  3.31970696811498733d0,  0.d0, -0.175169946270707477d0,
     '  3.42556936906377896d0,  0.d0, -0.182561109781128134d0,
     '  3.52738190528014872d0,  0.d0, -0.152633117664692675d0,
     '  3.61240502606239389d0,  0.d0, -0.891307855930584675d-1,
     '  3.66999999897453755d0,  0.d0,  0.d0/
      DATA SPLPARA/0.d0,6*1.637454d0,12*3.274908d0,19*4.912363d0,
     '  25*6.549817d0,32*8.187271d0,38*9.824725d0,44*11.462179d0,
     '  50*13.099633d0,56*14.737087d0,62*16.374542d0,68*18.011995d0,
     '  73*19.649450d0,79*21.286903d0,84*22.924358d0,89*24.561811d0,
     '  94*26.199266d0,98*27.836721d0,103*29.474174d0,
     '  107*31.111629d0,111*32.749084d0,115*34.386536d0,
     '  119*36.023991d0,125*37.661446d0,131*39.298901d0/

      CALL ENTERS('USER_11',*9999)

      DO i=1,NSPLINE
        TSPLINE(i)=DBLE(i)-1.d0
        INDX1=(i-1)*3
        INDX3=INDX1+3
        INDX1=INDX1+1
        SYS_RSPLINE(i)=SYS_POINTS(INDX1)
        SYS_ZSPLINE(i)=SYS_POINTS(INDX3)
        DIAS_RSPLINE(i)=DIAS_POINTS(INDX1)
        DIAS_ZSPLINE(i)=DIAS_POINTS(INDX3)
      ENDDO
      bnonode=3367
      bnvc=NVCNODE(MAP,bnonode)
c     SMAR009 22/12/98   nonode=NVCB(1,bnvc)
      AMPLITUDE=DCOS(2.d0*PI*SIMTIME/HEART_PERIOD)
      RATIO=0.5d0*(AMPLITUDE+1.d0)
      DO i=1,NSPLINE
        RSPLINE(i)=RATIO*SYS_RSPLINE(i)+(1.d0-RATIO)*DIAS_RSPLINE(i)
        ZSPLINE(i)=RATIO*SYS_ZSPLINE(i)+(1.d0-RATIO)*DIAS_ZSPLINE(i)
      ENDDO
      BC1=0.99d31
      BC2=0.99d31
      CALL NRSPLINE(TSPLINE,RSPLINE,NSPLINE,BC1,BC2,R2SPLINE,
     '  ERROR,*9999)
      CALL NRSPLINE(TSPLINE,ZSPLINE,NSPLINE,BC1,BC2,Z2SPLINE,
     '  ERROR,*9999)
      OLDTT=-1.d0
      DO bnvc=1,NVBT
        IF(NVCB(BCTYPE,bnvc).EQ.DRIVING) THEN
          bnonode=NODENVCB(bnvc)
          bnp=NPNODE(bnonode,nr)
          ibnonode=NVCB(1,bnvc)
          ibnp=NPNODE(ibnonode,nr)
          TT=SPLPARA(bnonode-(NDRVSTART-1))
          IF(TT.NE.OLDTT) THEN
            OLDTT=TT
            CALL NRSPLINT(TSPLINE,RSPLINE,R2SPLINE,NSPLINE,TT,R,
     '        ERROR,*9999)
            CALL NRSPLINT(TSPLINE,ZSPLINE,Z2SPLINE,NSPLINE,TT,POS(3),
     '        ERROR,*9999)
            CALL NRSPLINTGRAD(TSPLINE,RSPLINE,R2SPLINE,NSPLINE,TT,XGRAD,
     '        ERROR,*9999)
            CALL NRSPLINTGRAD(TSPLINE,ZSPLINE,Z2SPLINE,NSPLINE,TT,ZGRAD,
     '        ERROR,*9999)
            MAG=DSQRT(ZGRAD**2+XGRAD**2)
            RGRAD=ZGRAD/MAG
            NORMAL1(3)=-XGRAD/MAG
          ENDIF
          DO njj=1,NJ_LOC(NJL_GEOM,0,nr)
            nj=NJ_LOC(NJL_GEOM,njj,nr)
            OLDB(njj)=XP(1,1,nj,bnp)
            OLDIB(njj)=XP(1,1,nj,ibnp)
          ENDDO
          THETA1=DATAN2(OLDB(2),OLDB(1))
          COSTHETA1=DCOS(THETA1)
          SINTHETA1=DSIN(THETA1)
          POS(1)=R*COSTHETA1
          POS(2)=R*SINTHETA1
          NORMAL1(1)=RGRAD*COSTHETA1
          NORMAL1(2)=RGRAD*SINTHETA1
          DO njj=1,NJ_LOC(NJL_GEOM,0,nr)
            nj=NJ_LOC(NJL_GEOM,njj,nr)
            DIST=0.5d0*BD*NORMAL1(njj)
            XP(1,1,nj,ibnp)=POS(njj)-DIST
            XP(1,1,nj,bnp)=POS(njj)+DIST
            XP(1,2,nj,ibnp)=(XP(1,1,nj,ibnp)-OLDIB(njj))/DT
            XP(1,2,nj,bnp)=(XP(1,1,nj,bnp)-OLDB(njj))/DT
          ENDDO
        ENDIF
      ENDDO

      CALL EXITS('USER_11')
      RETURN
 9999 CALL ERRORS('USER_11',ERROR)
      CALL EXITS('USER_11')
      RETURN 1
      END

