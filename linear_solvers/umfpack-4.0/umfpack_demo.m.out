
                              < M A T L A B >
                  Copyright 1984-2000 The MathWorks, Inc.
                        Version 6.0.0.88 Release 12
                                Sep 21 2000

 
  To get started, type one of these: helpwin, helpdesk, or demo.
  For product information, visit www.mathworks.com.
 
>> umfpack_demo
--------------------------------------------------------------
Factor and solve a 5-by-5 system, Ax=b, using default parameters
(except for verbose printing enabled)
A, as a dense matrix:

A =

     2     3     0     0     0
     3     0     4     0     6
     0    -1    -3     2     0
     0     0     1     0     0
     0     4     2     0     1

A, as a sparse matrix:

A =

   (1,1)        2
   (2,1)        3
   (1,2)        3
   (3,2)       -1
   (5,2)        4
   (2,3)        4
   (3,3)       -3
   (4,3)        1
   (5,3)        2
   (3,4)        2
   (2,5)        6
   (5,5)        1


b =

     8
    45
    -3
     3
    19


umfpack: x = A\b

UMFPACK V4.0 (Apr 11, 2002), Control:
    Matrix entry defined as: double
    Int (generic integer) defined as: int
    1: print level: 5
    2: dense row parameter:    0.2
       ("dense" rows have    > max (16, (0.2)*16*sqrt(n_col)) entries)
    3: dense column parameter: 0.2
       ("dense" columns have > max (16, (0.2)*16*sqrt(n_row)) entries)
    4: pivot tolerance: 0.1
    5: block size for dense matrix kernels: 24
    7: initial allocation ratio: 0.7
    6: relaxed amalgamation parameter:  0.25
    14: relaxed2 amalgamation parameter: 0.1
    15: relaxed3 amalgamation parameter: 0.125
    8: max iterative refinement steps: 2

    The following options can only be changed at compile-time:
    9: BLAS library used:  built-in MATLAB BLAS.
    10: compiled for MATLAB (uses mxMalloc, mxFree, mxRealloc, and mexPrintf)
    11: CPU timer is getrusage.
    12: compiled for normal operation (debugging disabled)
    computer/operating system: Sun Solaris
    size of int: 4 long: 4 Int: 4 pointer: 4 double: 8 Entry: 8 (in bytes)


A: column-form matrix, n_row 5 n_col 5, nz = 12. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (2)
	row 2 : (3)

    column 2: start: 2 end: 4 entries: 3
	row 1 : (3)
	row 3 : (-1)
	row 5 : (4)

    column 3: start: 5 end: 8 entries: 4
	row 2 : (4)
	row 3 : (-3)
	row 4 : (1)
	row 5 : (2)

    column 4: start: 9 end: 9 entries: 1
	row 3 : (2)

    column 5: start: 10 end: 11 entries: 2
	row 2 : (6)
	row 5 : (1)
    column-form matrix OK

Symbolic object: 
    matrix to be factorized:
	n_row: 5 n_col: 5
	number of entries: 12
	dense row contol parameter used: 0.2
	dense column contol parameter used: 0.2
	block size used for dense matrix kernels:  24
    variable-size part of Numeric object:
	minimum initial size (Units): 100
	estimated peak size (Units):  129
	estimated final size (Units): 20
    peak memory usage for symbolic factorization (Units): 108
    frontal matrices / supercolumns:
	number of frontal chains: 2
	number of frontal matrices: 3
	largest frontal matrix size (entries): 16
	largest frontal matrix row dimension: 4
	largest frontal matrix column dimension: 4

    Frontal chain: 1.  Frontal matrices 1 to 1
	Largest frontal matrix in Frontal chain: 1-by-3
	Front: 1  pivot cols: 1 (pivot columns 1 to 1)
	    pivot row candidates: 1 to 1
	    leftmost descendant: 1
	    1st new candidate row : 1
	    parent: (none)

    Frontal chain: 2.  Frontal matrices 2 to 3
	Largest frontal matrix in Frontal chain: 4-by-4
	Front: 2  pivot cols: 2 (pivot columns 2 to 3)
	    pivot row candidates: 2 to 4
	    leftmost descendant: 2
	    1st new candidate row : 2
	    parent: 3
	Front: 3  pivot cols: 2 (pivot columns 4 to 5)
	    pivot row candidates: 2 to 5
	    leftmost descendant: 2
	    1st new candidate row : 5
	    parent: (none)

Initial column permutation, Qtree: permutation vector, n = 5. 
    1 : 4 
    2 : 3 
    3 : 5 
    4 : 2 
    5 : 1 
    permutation vector OK


Initial row permutation, Ptree: permutation vector, n = 5. 
    1 : 3 
    2 : 2 
    3 : 4 
    4 : 5 
    5 : 1 
    permutation vector OK

    Symbolic object:  OK

Numeric object:  
    n_row: 5  n_col: 5
    relative pivot tolerance used:              0.1
    relaxed amalgamation parameters used:       0.25 0.1 0.125
    initial allocation parameter used:          0.7
    final total size of Numeric object (Units): 69
    peak size of variable-size part (Units):    100
    largest actual frontal matrix size:         9
    memory defragmentations:                    1
    memory reallocations:                       1
    costly memory reallocations:                1
    entries in compressed pattern (L and U):    6
    number of nonzeros in L (excl diag):        3
    number of entries stored in L (excl diag):  3
    number of nonzeros in U (excl diag):        5
    number of entries stored in U (excl diag):  5
    factorization floating-point operations:    9
    number of nonzeros on diagonal of U:        5
    smallest abs. value on diagonal of U:       1
    largest abs. value on diagonal of U:        6
    reciprical condition number estimate:       0.166667

P: row permutation vector, n = 5. 
    1 : 3 
    2 : 2 
    3 : 4 
    4 : 1 
    5 : 5 
    permutation vector OK


Q: column permutation vector, n = 5. 
    1 : 4 
    2 : 5 
    3 : 3 
    4 : 2 
    5 : 1 
    permutation vector OK


L in Numeric object, in column-oriented compressed-pattern form:
    Diagonal entries are all equal to 1.0 (not stored)

    column 1:  length 0.  Start of Lchain.

    column 2:  add 1 entries.  length 1.  Start of Lchain.
	row 5 :  (0.166667)

    column 3:  length 1.
	row 5 :  (1.33333)

    column 4:  length 1.
	row 5 :  (1.33333)

    column 5:  length 0.  Start of Lchain.


U in Numeric object, in row-oriented compressed-pattern form:
    Diagonal is stored separately.

    row 5:  length 0.  End of Uchain.

    row 4:  length 1.  End of Uchain.
	col 5 : (2)

    row 3:  length 0.  End of Uchain.

    row 2:  length 2.  End of Uchain.
	col 3 : (4)
	col 5 : (3)

    row 1:  length 2.  End of Uchain.
	col 3 : (-3)
	col 4 : (-1)


Diagonal of U: dense vector, n = 5. 
    1 : (2)
    2 : (6)
    3 : (1)
    4 : (3)
    5 : (-3.16667)
    dense vector OK

    Numeric object:  OK


right-hand side, b: dense vector, n = 5. 
    1 : (8)
    2 : (45)
    3 : (-3)
    4 : (3)
    5 : (19)
    dense vector OK


solution, x: dense vector, n = 5. 
    1 : (1)
    2 : (2)
    3 : (3)
    4 : (4)
    5 : (5)
    dense vector OK


UMFPACK V4.0 (Apr 11, 2002), Info:
    matrix entry defined as: double
    Int (generic integer) defined as: int
    BLAS library used: built-in MATLAB BLAS.
    MATLAB: yes.
    CPU timer: getrusage.
    number of rows in input matrix:   5
    number of colums in input matrix: 5
    entries in input matrix:          12
    memory usage is reported below in 8-byte Units
    size of int:  4 bytes
    size of long:  4 bytes
    size of pointer:  4 bytes
    size of numerical entry:  8 bytes
    symbolic/numeric factorization:         estimate               actual      %
    number of "dense" rows                         -                    0      -
    rows with entries only in "dense" columns      -                    0      -
    number of "dense" columns                      -                    0      -
    columns with entries only in "dense" rows      -                    0      -
    symbolic factorization defragmentations        -                    0      -
    symbolic memory usage (Units)                  -                  108      -
    Symbolic size (Units)                          -                   35      -
    symbolic factorization time (sec)              -                 0.00      -
    variable-sized part of Numeric object:
        initial size (Units)                     100                  100   100%
        peak size (Units)                        129                  100    78%
        final size (Units)                        20                   13    65%
    Numeric final size (Units)                    73                   63    86%
    peak memory usage (Units)                    277                  248    90%
    numeric factorization flops                   22                    9    41%
    nz in L (incl diagonal)                        9                    8    89%
    nz in U (incl diagonal)                       13                   10    77%
    nz in L+U (incl diagonal)                     17                   13    76%
    largest front (# entries)                     16                    9    56%
    nonzeros on diagonal of U                      -                    5      -
    estimate of reciprocal of condition number     -          1.66667e-01      -
    indices in compressed pattern                  -                    6      -
    numerical values stored in Numeric object      -                   13      -
    numeric factorization defragmentations         -                    1      -
    numeric factorization reallocations            -                    1      -
    costly numeric factorization reallocations     -                    1      -
    numeric factorization time (sec)               -                 0.00      -
    solve flops                                    -                   94      -
    iterative refinement steps taken               -                    0      -
    iterative refinement steps attempted           -                    0      -
    sparse backward error omega1                   -                    0      -
    sparse backward error omega2                   -                    0      -
    solve time (sec)                               -                 0.00      -

Solution to Ax=b via UMFPACK:

x =

    1.0000
    2.0000
    3.0000
    4.0000
    5.0000

Solution to Ax=b via MATLAB:

x =

     1
     2
     3
     4
     5

Difference between UMFPACK and MATLAB solution:

ans =

   1.0e-15 *

   -0.1110
         0
         0
         0
         0

If you are using a version of MATLAB prior to V6.0, then the
following statement (Q2 = colamd (A)) may fail.  Either download
colamd from http://www.cise.ufl.edu/research/sparse, upgrade to
MATLAB V6.0 or later, or replace the statement with
Q2 = colmmd (A) ;

--------------------------------------------------------------
Then solve A'x=b:

umfpack: x = b/A

UMFPACK V4.0 (Apr 11, 2002), Control:
    Matrix entry defined as: double
    Int (generic integer) defined as: int
    1: print level: 5
    2: dense row parameter:    0.2
       ("dense" rows have    > max (16, (0.2)*16*sqrt(n_col)) entries)
    3: dense column parameter: 0.2
       ("dense" columns have > max (16, (0.2)*16*sqrt(n_row)) entries)
    4: pivot tolerance: 0.1
    5: block size for dense matrix kernels: 24
    7: initial allocation ratio: 0.7
    6: relaxed amalgamation parameter:  0.25
    14: relaxed2 amalgamation parameter: 0.1
    15: relaxed3 amalgamation parameter: 0.125
    8: max iterative refinement steps: 2

    The following options can only be changed at compile-time:
    9: BLAS library used:  built-in MATLAB BLAS.
    10: compiled for MATLAB (uses mxMalloc, mxFree, mxRealloc, and mexPrintf)
    11: CPU timer is getrusage.
    12: compiled for normal operation (debugging disabled)
    computer/operating system: Sun Solaris
    size of int: 4 long: 4 Int: 4 pointer: 4 double: 8 Entry: 8 (in bytes)


A: column-form matrix, n_row 5 n_col 5, nz = 12. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (2)
	row 2 : (3)

    column 2: start: 2 end: 4 entries: 3
	row 1 : (3)
	row 3 : (-1)
	row 5 : (4)

    column 3: start: 5 end: 8 entries: 4
	row 2 : (4)
	row 3 : (-3)
	row 4 : (1)
	row 5 : (2)

    column 4: start: 9 end: 9 entries: 1
	row 3 : (2)

    column 5: start: 10 end: 11 entries: 2
	row 2 : (6)
	row 5 : (1)
    column-form matrix OK

Symbolic object: 
    matrix to be factorized:
	n_row: 5 n_col: 5
	number of entries: 12
	dense row contol parameter used: 0.2
	dense column contol parameter used: 0.2
	block size used for dense matrix kernels:  24
    variable-size part of Numeric object:
	minimum initial size (Units): 100
	estimated peak size (Units):  123
	estimated final size (Units): 21
    peak memory usage for symbolic factorization (Units): 108
    frontal matrices / supercolumns:
	number of frontal chains: 2
	number of frontal matrices: 3
	largest frontal matrix size (entries): 20
	largest frontal matrix row dimension: 4
	largest frontal matrix column dimension: 5

    Frontal chain: 1.  Frontal matrices 1 to 2
	Largest frontal matrix in Frontal chain: 4-by-5
	Front: 1  pivot cols: 1 (pivot columns 1 to 1)
	    pivot row candidates: 1 to 2
	    leftmost descendant: 1
	    1st new candidate row : 1
	    parent: 2
	Front: 2  pivot cols: 3 (pivot columns 2 to 4)
	    pivot row candidates: 1 to 4
	    leftmost descendant: 1
	    1st new candidate row : 3
	    parent: (none)

    Frontal chain: 2.  Frontal matrices 3 to 3
	Largest frontal matrix in Frontal chain: 1-by-1
	Front: 3  pivot cols: 1 (pivot columns 5 to 5)
	    pivot row candidates: 5 to 5
	    leftmost descendant: 3
	    1st new candidate row : 5
	    parent: (none)

Initial column permutation, Qtree: permutation vector, n = 5. 
    1 : 1 
    2 : 5 
    3 : 2 
    4 : 4 
    5 : 3 
    permutation vector OK


Initial row permutation, Ptree: permutation vector, n = 5. 
    1 : 1 
    2 : 2 
    3 : 3 
    4 : 5 
    5 : 4 
    permutation vector OK

    Symbolic object:  OK

Numeric object:  
    n_row: 5  n_col: 5
    relative pivot tolerance used:              0.1
    relaxed amalgamation parameters used:       0.25 0.1 0.125
    initial allocation parameter used:          0.7
    final total size of Numeric object (Units): 71
    peak size of variable-size part (Units):    100
    largest actual frontal matrix size:         4
    memory defragmentations:                    1
    memory reallocations:                       1
    costly memory reallocations:                1
    entries in compressed pattern (L and U):    7
    number of nonzeros in L (excl diag):        2
    number of entries stored in L (excl diag):  2
    number of nonzeros in U (excl diag):        6
    number of entries stored in U (excl diag):  6
    factorization floating-point operations:    6
    number of nonzeros on diagonal of U:        5
    smallest abs. value on diagonal of U:       1
    largest abs. value on diagonal of U:        28.5
    reciprical condition number estimate:       0.0350877

P: row permutation vector, n = 5. 
    1 : 1 
    2 : 3 
    3 : 5 
    4 : 2 
    5 : 4 
    permutation vector OK


Q: column permutation vector, n = 5. 
    1 : 1 
    2 : 4 
    3 : 5 
    4 : 2 
    5 : 3 
    permutation vector OK


L in Numeric object, in column-oriented compressed-pattern form:
    Diagonal entries are all equal to 1.0 (not stored)

    column 1:  add 1 entries.  length 1.  Start of Lchain.
	row 4 :  (1.5)

    column 2:  length 0.  Start of Lchain.

    column 3:  add 1 entries.  length 1.  Start of Lchain.
	row 4 :  (4)

    column 4:  length 0.  Start of Lchain.

    column 5:  length 0.  Start of Lchain.


U in Numeric object, in row-oriented compressed-pattern form:
    Diagonal is stored separately.

    row 5:  length 0.  End of Uchain.

    row 4:  length 1.  End of Uchain.
	col 5 : (-1)

    row 3:  length 1.  End of Uchain.
	col 4 : (6)

    row 2:  length 3.  End of Uchain.
	col 4 : (4)
	col 3 : (2)
	col 5 : (-3)

    row 1:  remove 2 entries.  length 1.
	col 4 : (3)


Diagonal of U: dense vector, n = 5. 
    1 : (2)
    2 : (1)
    3 : (1)
    4 : (-28.5)
    5 : (2)
    dense vector OK

    Numeric object:  OK


right-hand side, b: dense vector, n = 5. 
    1 : (8)
    2 : (45)
    3 : (-3)
    4 : (3)
    5 : (19)
    dense vector OK


solution, x: dense vector, n = 5. 
    1 : (1.81579)
    2 : (1.45614)
    3 : (1.5)
    4 : (-24.8509)
    5 : (10.2632)
    dense vector OK


UMFPACK V4.0 (Apr 11, 2002), Info:
    matrix entry defined as: double
    Int (generic integer) defined as: int
    BLAS library used: built-in MATLAB BLAS.
    MATLAB: yes.
    CPU timer: getrusage.
    number of rows in input matrix:   5
    number of colums in input matrix: 5
    entries in input matrix:          12
    memory usage is reported below in 8-byte Units
    size of int:  4 bytes
    size of long:  4 bytes
    size of pointer:  4 bytes
    size of numerical entry:  8 bytes
    symbolic/numeric factorization:         estimate               actual      %
    number of "dense" rows                         -                    0      -
    rows with entries only in "dense" columns      -                    0      -
    number of "dense" columns                      -                    0      -
    columns with entries only in "dense" rows      -                    0      -
    symbolic factorization defragmentations        -                    0      -
    symbolic memory usage (Units)                  -                  108      -
    Symbolic size (Units)                          -                   35      -
    symbolic factorization time (sec)              -                 0.00      -
    variable-sized part of Numeric object:
        initial size (Units)                     100                  100   100%
        peak size (Units)                        123                  100    81%
        final size (Units)                        21                   15    71%
    Numeric final size (Units)                    74                   65    88%
    peak memory usage (Units)                    275                  252    92%
    numeric factorization flops                   26                    6    23%
    nz in L (incl diagonal)                        9                    7    78%
    nz in U (incl diagonal)                       14                   11    79%
    nz in L+U (incl diagonal)                     18                   13    72%
    largest front (# entries)                     20                    4    20%
    nonzeros on diagonal of U                      -                    5      -
    estimate of reciprocal of condition number     -          3.50877e-02      -
    indices in compressed pattern                  -                    7      -
    numerical values stored in Numeric object      -                   13      -
    numeric factorization defragmentations         -                    1      -
    numeric factorization reallocations            -                    1      -
    costly numeric factorization reallocations     -                    1      -
    numeric factorization time (sec)               -                 0.00      -
    solve flops                                    -                   94      -
    iterative refinement steps taken               -                    0      -
    iterative refinement steps attempted           -                    0      -
    sparse backward error omega1                   -                    0      -
    sparse backward error omega2                   -                    0      -
    solve time (sec)                               -                 0.00      -

Solution to A'x=b via UMFPACK:

x =

    1.8158
    1.4561
    1.5000
  -24.8509
   10.2632

Solution to A'x=b via MATLAB:

x =

    1.8158
    1.4561
    1.5000
  -24.8509
   10.2632

Difference between UMFPACK and MATLAB solution:

ans =

   1.0e-14 *

    0.0444
   -0.0222
    0.1110
         0
    0.1776


--------------------------------------------------------------
Set A (2,5) to zero and solve Ax=b

A =

   (1,1)        2
   (2,1)        3
   (1,2)        3
   (3,2)       -1
   (5,2)        4
   (2,3)        4
   (3,3)       -3
   (4,3)        1
   (5,3)        2
   (3,4)        2
   (5,5)        1


umfpack: x = A\b

UMFPACK V4.0 (Apr 11, 2002), Control:
    Matrix entry defined as: double
    Int (generic integer) defined as: int
    1: print level: 5
    2: dense row parameter:    0.2
       ("dense" rows have    > max (16, (0.2)*16*sqrt(n_col)) entries)
    3: dense column parameter: 0.2
       ("dense" columns have > max (16, (0.2)*16*sqrt(n_row)) entries)
    4: pivot tolerance: 0.1
    5: block size for dense matrix kernels: 24
    7: initial allocation ratio: 0.7
    6: relaxed amalgamation parameter:  0.25
    14: relaxed2 amalgamation parameter: 0.1
    15: relaxed3 amalgamation parameter: 0.125
    8: max iterative refinement steps: 2

    The following options can only be changed at compile-time:
    9: BLAS library used:  built-in MATLAB BLAS.
    10: compiled for MATLAB (uses mxMalloc, mxFree, mxRealloc, and mexPrintf)
    11: CPU timer is getrusage.
    12: compiled for normal operation (debugging disabled)
    computer/operating system: Sun Solaris
    size of int: 4 long: 4 Int: 4 pointer: 4 double: 8 Entry: 8 (in bytes)


A: column-form matrix, n_row 5 n_col 5, nz = 11. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (2)
	row 2 : (3)

    column 2: start: 2 end: 4 entries: 3
	row 1 : (3)
	row 3 : (-1)
	row 5 : (4)

    column 3: start: 5 end: 8 entries: 4
	row 2 : (4)
	row 3 : (-3)
	row 4 : (1)
	row 5 : (2)

    column 4: start: 9 end: 9 entries: 1
	row 3 : (2)

    column 5: start: 10 end: 10 entries: 1
	row 5 : (1)
    column-form matrix OK

Symbolic object: 
    matrix to be factorized:
	n_row: 5 n_col: 5
	number of entries: 11
	dense row contol parameter used: 0.2
	dense column contol parameter used: 0.2
	block size used for dense matrix kernels:  24
    variable-size part of Numeric object:
	minimum initial size (Units): 98
	estimated peak size (Units):  121
	estimated final size (Units): 19
    peak memory usage for symbolic factorization (Units): 107
    frontal matrices / supercolumns:
	number of frontal chains: 2
	number of frontal matrices: 3
	largest frontal matrix size (entries): 16
	largest frontal matrix row dimension: 4
	largest frontal matrix column dimension: 4

    Frontal chain: 1.  Frontal matrices 1 to 1
	Largest frontal matrix in Frontal chain: 1-by-3
	Front: 1  pivot cols: 1 (pivot columns 1 to 1)
	    pivot row candidates: 1 to 1
	    leftmost descendant: 1
	    1st new candidate row : 1
	    parent: (none)

    Frontal chain: 2.  Frontal matrices 2 to 3
	Largest frontal matrix in Frontal chain: 4-by-4
	Front: 2  pivot cols: 1 (pivot columns 2 to 2)
	    pivot row candidates: 2 to 3
	    leftmost descendant: 2
	    1st new candidate row : 2
	    parent: 3
	Front: 3  pivot cols: 3 (pivot columns 3 to 5)
	    pivot row candidates: 2 to 5
	    leftmost descendant: 2
	    1st new candidate row : 4
	    parent: (none)

Initial column permutation, Qtree: permutation vector, n = 5. 
    1 : 4 
    2 : 1 
    3 : 3 
    4 : 5 
    5 : 2 
    permutation vector OK


Initial row permutation, Ptree: permutation vector, n = 5. 
    1 : 3 
    2 : 1 
    3 : 2 
    4 : 4 
    5 : 5 
    permutation vector OK

    Symbolic object:  OK

Numeric object:  
    n_row: 5  n_col: 5
    relative pivot tolerance used:              0.1
    relaxed amalgamation parameters used:       0.25 0.1 0.125
    initial allocation parameter used:          0.7
    final total size of Numeric object (Units): 68
    peak size of variable-size part (Units):    98
    largest actual frontal matrix size:         4
    memory defragmentations:                    1
    memory reallocations:                       1
    costly memory reallocations:                0
    entries in compressed pattern (L and U):    5
    number of nonzeros in L (excl diag):        1
    number of entries stored in L (excl diag):  1
    number of nonzeros in U (excl diag):        6
    number of entries stored in U (excl diag):  6
    factorization floating-point operations:    3
    number of nonzeros on diagonal of U:        5
    smallest abs. value on diagonal of U:       1
    largest abs. value on diagonal of U:        4.5
    reciprical condition number estimate:       0.222222

P: row permutation vector, n = 5. 
    1 : 3 
    2 : 1 
    3 : 5 
    4 : 2 
    5 : 4 
    permutation vector OK


Q: column permutation vector, n = 5. 
    1 : 4 
    2 : 1 
    3 : 5 
    4 : 2 
    5 : 3 
    permutation vector OK


L in Numeric object, in column-oriented compressed-pattern form:
    Diagonal entries are all equal to 1.0 (not stored)

    column 1:  length 0.  Start of Lchain.

    column 2:  add 1 entries.  length 1.  Start of Lchain.
	row 4 :  (1.5)

    column 3:  length 0.  Start of Lchain.

    column 4:  length 0.  Start of Lchain.

    column 5:  length 0.  Start of Lchain.


U in Numeric object, in row-oriented compressed-pattern form:
    Diagonal is stored separately.

    row 5:  length 0.  End of Uchain.

    row 4:  length 1.  End of Uchain.
	col 5 : (4)

    row 3:  add column 4 at position 1.  length 2.
	col 4 : (4)
	col 5 : (2)

    row 2:  length 1.  End of Uchain.
	col 4 : (3)

    row 1:  length 2.  End of Uchain.
	col 5 : (-3)
	col 4 : (-1)


Diagonal of U: dense vector, n = 5. 
    1 : (2)
    2 : (2)
    3 : (1)
    4 : (-4.5)
    5 : (1)
    dense vector OK

    Numeric object:  OK


right-hand side, b: dense vector, n = 5. 
    1 : (8)
    2 : (45)
    3 : (-3)
    4 : (3)
    5 : (19)
    dense vector OK


solution, x: dense vector, n = 5. 
    1 : (11)
    2 : (-4.66667)
    3 : (3)
    4 : (0.666667)
    5 : (31.6667)
    dense vector OK


UMFPACK V4.0 (Apr 11, 2002), Info:
    matrix entry defined as: double
    Int (generic integer) defined as: int
    BLAS library used: built-in MATLAB BLAS.
    MATLAB: yes.
    CPU timer: getrusage.
    number of rows in input matrix:   5
    number of colums in input matrix: 5
    entries in input matrix:          11
    memory usage is reported below in 8-byte Units
    size of int:  4 bytes
    size of long:  4 bytes
    size of pointer:  4 bytes
    size of numerical entry:  8 bytes
    symbolic/numeric factorization:         estimate               actual      %
    number of "dense" rows                         -                    0      -
    rows with entries only in "dense" columns      -                    0      -
    number of "dense" columns                      -                    0      -
    columns with entries only in "dense" rows      -                    0      -
    symbolic factorization defragmentations        -                    0      -
    symbolic memory usage (Units)                  -                  107      -
    Symbolic size (Units)                          -                   35      -
    symbolic factorization time (sec)              -                 0.00      -
    variable-sized part of Numeric object:
        initial size (Units)                      98                   98   100%
        peak size (Units)                        121                   98    81%
        final size (Units)                        19                   12    63%
    Numeric final size (Units)                    72                   62    86%
    peak memory usage (Units)                    269                  246    91%
    numeric factorization flops                   18                    3    17%
    nz in L (incl diagonal)                        9                    6    67%
    nz in U (incl diagonal)                       12                   11    92%
    nz in L+U (incl diagonal)                     16                   12    75%
    largest front (# entries)                     16                    4    25%
    nonzeros on diagonal of U                      -                    5      -
    estimate of reciprocal of condition number     -          2.22222e-01      -
    indices in compressed pattern                  -                    5      -
    numerical values stored in Numeric object      -                   12      -
    numeric factorization defragmentations         -                    1      -
    numeric factorization reallocations            -                    1      -
    costly numeric factorization reallocations     -                    0      -
    numeric factorization time (sec)               -                 0.00      -
    solve flops                                    -                   88      -
    iterative refinement steps taken               -                    0      -
    iterative refinement steps attempted           -                    0      -
    sparse backward error omega1                   -                    0      -
    sparse backward error omega2                   -                    0      -
    solve time (sec)                               -                 0.00      -

Solution to modified Ax=b via UMFPACK:

x =

   11.0000
   -4.6667
    3.0000
    0.6667
   31.6667

Solution to modified Ax=b via MATLAB:

x =

   11.0000
   -4.6667
    3.0000
    0.6667
   31.6667

Difference between UMFPACK and MATLAB solution:

ans =

   1.0e-14 *

         0
         0
         0
         0
    0.3553


--------------------------------------------------------------
Next, change all of the entries in A, but not the pattern.

A =

     2    13     0     0     0
     2     0    23     0    39
     0     7    15    30     0
     0     0    18     0     0
     0    10    18     0    37


A =

   (1,1)        2
   (2,1)        2
   (1,2)       13
   (3,2)        7
   (5,2)       10
   (2,3)       23
   (3,3)       15
   (4,3)       18
   (5,3)       18
   (3,4)       30
   (2,5)       39
   (5,5)       37

Compute the LU factorization of A via UMFPACK:

umfpack: numeric factorization

UMFPACK V4.0 (Apr 11, 2002), Control:
    Matrix entry defined as: double
    Int (generic integer) defined as: int
    1: print level: 5
    2: dense row parameter:    0.2
       ("dense" rows have    > max (16, (0.2)*16*sqrt(n_col)) entries)
    3: dense column parameter: 0.2
       ("dense" columns have > max (16, (0.2)*16*sqrt(n_row)) entries)
    4: pivot tolerance: 0.1
    5: block size for dense matrix kernels: 24
    7: initial allocation ratio: 0.7
    6: relaxed amalgamation parameter:  0.25
    14: relaxed2 amalgamation parameter: 0.1
    15: relaxed3 amalgamation parameter: 0.125
    8: max iterative refinement steps: 2

    The following options can only be changed at compile-time:
    9: BLAS library used:  built-in MATLAB BLAS.
    10: compiled for MATLAB (uses mxMalloc, mxFree, mxRealloc, and mexPrintf)
    11: CPU timer is getrusage.
    12: compiled for normal operation (debugging disabled)
    computer/operating system: Sun Solaris
    size of int: 4 long: 4 Int: 4 pointer: 4 double: 8 Entry: 8 (in bytes)


A: column-form matrix, n_row 5 n_col 5, nz = 12. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (2)
	row 2 : (2)

    column 2: start: 2 end: 4 entries: 3
	row 1 : (13)
	row 3 : (7)
	row 5 : (10)

    column 3: start: 5 end: 8 entries: 4
	row 2 : (23)
	row 3 : (15)
	row 4 : (18)
	row 5 : (18)

    column 4: start: 9 end: 9 entries: 1
	row 3 : (30)

    column 5: start: 10 end: 11 entries: 2
	row 2 : (39)
	row 5 : (37)
    column-form matrix OK

Symbolic object: 
    matrix to be factorized:
	n_row: 5 n_col: 5
	number of entries: 12
	dense row contol parameter used: 0.2
	dense column contol parameter used: 0.2
	block size used for dense matrix kernels:  24
    variable-size part of Numeric object:
	minimum initial size (Units): 100
	estimated peak size (Units):  129
	estimated final size (Units): 20
    peak memory usage for symbolic factorization (Units): 108
    frontal matrices / supercolumns:
	number of frontal chains: 2
	number of frontal matrices: 3
	largest frontal matrix size (entries): 16
	largest frontal matrix row dimension: 4
	largest frontal matrix column dimension: 4

    Frontal chain: 1.  Frontal matrices 1 to 1
	Largest frontal matrix in Frontal chain: 1-by-3
	Front: 1  pivot cols: 1 (pivot columns 1 to 1)
	    pivot row candidates: 1 to 1
	    leftmost descendant: 1
	    1st new candidate row : 1
	    parent: (none)

    Frontal chain: 2.  Frontal matrices 2 to 3
	Largest frontal matrix in Frontal chain: 4-by-4
	Front: 2  pivot cols: 2 (pivot columns 2 to 3)
	    pivot row candidates: 2 to 4
	    leftmost descendant: 2
	    1st new candidate row : 2
	    parent: 3
	Front: 3  pivot cols: 2 (pivot columns 4 to 5)
	    pivot row candidates: 2 to 5
	    leftmost descendant: 2
	    1st new candidate row : 5
	    parent: (none)

Initial column permutation, Qtree: permutation vector, n = 5. 
    1 : 4 
    2 : 3 
    3 : 5 
    4 : 2 
    5 : 1 
    permutation vector OK


Initial row permutation, Ptree: permutation vector, n = 5. 
    1 : 3 
    2 : 2 
    3 : 4 
    4 : 5 
    5 : 1 
    permutation vector OK

    Symbolic object:  OK

Numeric object:  
    n_row: 5  n_col: 5
    relative pivot tolerance used:              0.1
    relaxed amalgamation parameters used:       0.25 0.1 0.125
    initial allocation parameter used:          0.7
    final total size of Numeric object (Units): 69
    peak size of variable-size part (Units):    100
    largest actual frontal matrix size:         9
    memory defragmentations:                    1
    memory reallocations:                       1
    costly memory reallocations:                1
    entries in compressed pattern (L and U):    6
    number of nonzeros in L (excl diag):        3
    number of entries stored in L (excl diag):  3
    number of nonzeros in U (excl diag):        5
    number of entries stored in U (excl diag):  5
    factorization floating-point operations:    9
    number of nonzeros on diagonal of U:        5
    smallest abs. value on diagonal of U:       3.4359
    largest abs. value on diagonal of U:        39
    reciprical condition number estimate:       0.0880999

P: row permutation vector, n = 5. 
    1 : 3 
    2 : 2 
    3 : 4 
    4 : 1 
    5 : 5 
    permutation vector OK


Q: column permutation vector, n = 5. 
    1 : 4 
    2 : 5 
    3 : 3 
    4 : 2 
    5 : 1 
    permutation vector OK


L in Numeric object, in column-oriented compressed-pattern form:
    Diagonal entries are all equal to 1.0 (not stored)

    column 1:  length 0.  Start of Lchain.

    column 2:  add 1 entries.  length 1.  Start of Lchain.
	row 5 :  (0.948718)

    column 3:  length 1.
	row 5 :  (-0.212251)

    column 4:  length 1.
	row 5 :  (0.769231)

    column 5:  length 0.  Start of Lchain.


U in Numeric object, in row-oriented compressed-pattern form:
    Diagonal is stored separately.

    row 5:  length 0.  End of Uchain.

    row 4:  length 1.  End of Uchain.
	col 5 : (2)

    row 3:  length 0.  End of Uchain.

    row 2:  length 2.  End of Uchain.
	col 3 : (23)
	col 5 : (2)

    row 1:  length 2.  End of Uchain.
	col 3 : (15)
	col 4 : (7)


Diagonal of U: dense vector, n = 5. 
    1 : (30)
    2 : (39)
    3 : (18)
    4 : (13)
    5 : (-3.4359)
    dense vector OK

    Numeric object:  OK


L: column-form matrix, n_row 5 n_col 5, nz = 8. 

    column 1: start: 0 end: 0 entries: 1
	row 1 : (1)

    column 2: start: 1 end: 2 entries: 2
	row 2 : (1)
	row 5 : (0.948718)

    column 3: start: 3 end: 4 entries: 2
	row 3 : (1)
	row 5 : (-0.212251)

    column 4: start: 5 end: 6 entries: 2
	row 4 : (1)
	row 5 : (0.769231)

    column 5: start: 7 end: 7 entries: 1
	row 5 : (1)
    column-form matrix OK


U: column-form matrix, n_row 5 n_col 5, nz = 10. 

    column 1: start: 0 end: 0 entries: 1
	row 1 : (30)

    column 2: start: 1 end: 1 entries: 1
	row 2 : (39)

    column 3: start: 2 end: 4 entries: 3
	row 1 : (15)
	row 2 : (23)
	row 3 : (18)

    column 4: start: 5 end: 6 entries: 2
	row 1 : (7)
	row 4 : (13)

    column 5: start: 7 end: 9 entries: 3
	row 2 : (2)
	row 4 : (2)
	row 5 : (-3.4359)
    column-form matrix OK


P: permutation vector, n = 5. 
    1 : 3 
    2 : 2 
    3 : 4 
    4 : 1 
    5 : 5 
    permutation vector OK


Q: permutation vector, n = 5. 
    1 : 4 
    2 : 5 
    3 : 3 
    4 : 2 
    5 : 1 
    permutation vector OK


UMFPACK V4.0 (Apr 11, 2002), Info:
    matrix entry defined as: double
    Int (generic integer) defined as: int
    BLAS library used: built-in MATLAB BLAS.
    MATLAB: yes.
    CPU timer: getrusage.
    number of rows in input matrix:   5
    number of colums in input matrix: 5
    entries in input matrix:          12
    memory usage is reported below in 8-byte Units
    size of int:  4 bytes
    size of long:  4 bytes
    size of pointer:  4 bytes
    size of numerical entry:  8 bytes
    symbolic/numeric factorization:         estimate               actual      %
    number of "dense" rows                         -                    0      -
    rows with entries only in "dense" columns      -                    0      -
    number of "dense" columns                      -                    0      -
    columns with entries only in "dense" rows      -                    0      -
    symbolic factorization defragmentations        -                    0      -
    symbolic memory usage (Units)                  -                  108      -
    Symbolic size (Units)                          -                   35      -
    symbolic factorization time (sec)              -                 0.00      -
    variable-sized part of Numeric object:
        initial size (Units)                     100                  100   100%
        peak size (Units)                        129                  100    78%
        final size (Units)                        20                   13    65%
    Numeric final size (Units)                    73                   63    86%
    peak memory usage (Units)                    277                  248    90%
    numeric factorization flops                   22                    9    41%
    nz in L (incl diagonal)                        9                    8    89%
    nz in U (incl diagonal)                       13                   10    77%
    nz in L+U (incl diagonal)                     17                   13    76%
    largest front (# entries)                     16                    9    56%
    nonzeros on diagonal of U                      -                    5      -
    estimate of reciprocal of condition number     -          8.80999e-02      -
    indices in compressed pattern                  -                    6      -
    numerical values stored in Numeric object      -                   13      -
    numeric factorization defragmentations         -                    1      -
    numeric factorization reallocations            -                    1      -
    costly numeric factorization reallocations     -                    1      -
    numeric factorization time (sec)               -                 0.00      -

Here are the LU factors of A:

L =

   (1,1)       1.0000
   (2,2)       1.0000
   (5,2)       0.9487
   (3,3)       1.0000
   (5,3)      -0.2123
   (4,4)       1.0000
   (5,4)       0.7692
   (5,5)       1.0000


U =

   (1,1)      30.0000
   (2,2)      39.0000
   (1,3)      15.0000
   (2,3)      23.0000
   (3,3)      18.0000
   (1,4)       7.0000
   (4,4)      13.0000
   (2,5)       2.0000
   (4,5)       2.0000
   (5,5)      -3.4359


P =

     3     2     4     1     5


Q =

     4     5     3     2     1

A (P,Q) - L*U should be zero:

A (P,Q) - L*U =

ans =

   All zero sparse: 5-by-5


solve Ax=b using the factors of A:
    x = U \ (L \ b (P)) ;
    x (Q) = x ;

x =

    8.5012
   -0.6925
    0.1667
   -0.0218
    0.6196

Solve Ax=b via MATLAB:

x =

    8.5012
   -0.6925
    0.1667
   -0.0218
    0.6196

Difference between UMFPACK and MATLAB solution:

ans =

   1.0e-15 *

         0
   -0.1110
   -0.1110
    0.1492
    0.1110


--------------------------------------------------------------
Finally, compute B = A', and compute the LU factorization of B
Factorizing A' can sometimes be better than factorizing A itself
(less work and memory usage).  Solve B'x=b; the solution is the
same as the solution to Ax=b for the original A.

B =

   (1,1)        2
   (2,1)       13
   (1,2)        2
   (3,2)       23
   (5,2)       39
   (2,3)        7
   (3,3)       15
   (4,3)       30
   (3,4)       18
   (2,5)       10
   (3,5)       18
   (5,5)       37


umfpack: numeric factorization

UMFPACK V4.0 (Apr 11, 2002), Control:
    Matrix entry defined as: double
    Int (generic integer) defined as: int
    1: print level: 5
    2: dense row parameter:    0.2
       ("dense" rows have    > max (16, (0.2)*16*sqrt(n_col)) entries)
    3: dense column parameter: 0.2
       ("dense" columns have > max (16, (0.2)*16*sqrt(n_row)) entries)
    4: pivot tolerance: 0.1
    5: block size for dense matrix kernels: 24
    7: initial allocation ratio: 0.7
    6: relaxed amalgamation parameter:  0.25
    14: relaxed2 amalgamation parameter: 0.1
    15: relaxed3 amalgamation parameter: 0.125
    8: max iterative refinement steps: 2

    The following options can only be changed at compile-time:
    9: BLAS library used:  built-in MATLAB BLAS.
    10: compiled for MATLAB (uses mxMalloc, mxFree, mxRealloc, and mexPrintf)
    11: CPU timer is getrusage.
    12: compiled for normal operation (debugging disabled)
    computer/operating system: Sun Solaris
    size of int: 4 long: 4 Int: 4 pointer: 4 double: 8 Entry: 8 (in bytes)


A: column-form matrix, n_row 5 n_col 5, nz = 12. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (2)
	row 2 : (13)

    column 2: start: 2 end: 4 entries: 3
	row 1 : (2)
	row 3 : (23)
	row 5 : (39)

    column 3: start: 5 end: 7 entries: 3
	row 2 : (7)
	row 3 : (15)
	row 4 : (30)

    column 4: start: 8 end: 8 entries: 1
	row 3 : (18)

    column 5: start: 9 end: 11 entries: 3
	row 2 : (10)
	row 3 : (18)
	row 5 : (37)
    column-form matrix OK

Symbolic object: 
    matrix to be factorized:
	n_row: 5 n_col: 5
	number of entries: 12
	dense row contol parameter used: 0.2
	dense column contol parameter used: 0.2
	block size used for dense matrix kernels:  24
    variable-size part of Numeric object:
	minimum initial size (Units): 100
	estimated peak size (Units):  123
	estimated final size (Units): 21
    peak memory usage for symbolic factorization (Units): 108
    frontal matrices / supercolumns:
	number of frontal chains: 2
	number of frontal matrices: 3
	largest frontal matrix size (entries): 20
	largest frontal matrix row dimension: 4
	largest frontal matrix column dimension: 5

    Frontal chain: 1.  Frontal matrices 1 to 2
	Largest frontal matrix in Frontal chain: 4-by-5
	Front: 1  pivot cols: 1 (pivot columns 1 to 1)
	    pivot row candidates: 1 to 2
	    leftmost descendant: 1
	    1st new candidate row : 1
	    parent: 2
	Front: 2  pivot cols: 3 (pivot columns 2 to 4)
	    pivot row candidates: 1 to 4
	    leftmost descendant: 1
	    1st new candidate row : 3
	    parent: (none)

    Frontal chain: 2.  Frontal matrices 3 to 3
	Largest frontal matrix in Frontal chain: 1-by-1
	Front: 3  pivot cols: 1 (pivot columns 5 to 5)
	    pivot row candidates: 5 to 5
	    leftmost descendant: 3
	    1st new candidate row : 5
	    parent: (none)

Initial column permutation, Qtree: permutation vector, n = 5. 
    1 : 1 
    2 : 5 
    3 : 2 
    4 : 4 
    5 : 3 
    permutation vector OK


Initial row permutation, Ptree: permutation vector, n = 5. 
    1 : 1 
    2 : 2 
    3 : 3 
    4 : 5 
    5 : 4 
    permutation vector OK

    Symbolic object:  OK

Numeric object:  
    n_row: 5  n_col: 5
    relative pivot tolerance used:              0.1
    relaxed amalgamation parameters used:       0.25 0.1 0.125
    initial allocation parameter used:          0.7
    final total size of Numeric object (Units): 71
    peak size of variable-size part (Units):    100
    largest actual frontal matrix size:         4
    memory defragmentations:                    1
    memory reallocations:                       1
    costly memory reallocations:                0
    entries in compressed pattern (L and U):    7
    number of nonzeros in L (excl diag):        2
    number of entries stored in L (excl diag):  2
    number of nonzeros in U (excl diag):        6
    number of entries stored in U (excl diag):  6
    factorization floating-point operations:    6
    number of nonzeros on diagonal of U:        5
    smallest abs. value on diagonal of U:       2
    largest abs. value on diagonal of U:        37
    reciprical condition number estimate:       0.0540541

P: row permutation vector, n = 5. 
    1 : 1 
    2 : 3 
    3 : 5 
    4 : 2 
    5 : 4 
    permutation vector OK


Q: column permutation vector, n = 5. 
    1 : 1 
    2 : 4 
    3 : 5 
    4 : 2 
    5 : 3 
    permutation vector OK


L in Numeric object, in column-oriented compressed-pattern form:
    Diagonal entries are all equal to 1.0 (not stored)

    column 1:  add 1 entries.  length 1.  Start of Lchain.
	row 4 :  (6.5)

    column 2:  length 0.  Start of Lchain.

    column 3:  add 1 entries.  length 1.  Start of Lchain.
	row 4 :  (0.27027)

    column 4:  length 0.  Start of Lchain.

    column 5:  length 0.  Start of Lchain.


U in Numeric object, in row-oriented compressed-pattern form:
    Diagonal is stored separately.

    row 5:  length 0.  End of Uchain.

    row 4:  length 1.  End of Uchain.
	col 5 : (7)

    row 3:  length 1.  End of Uchain.
	col 4 : (39)

    row 2:  length 3.  End of Uchain.
	col 4 : (23)
	col 3 : (18)
	col 5 : (15)

    row 1:  remove 2 entries.  length 1.
	col 4 : (2)


Diagonal of U: dense vector, n = 5. 
    1 : (2)
    2 : (18)
    3 : (37)
    4 : (-23.5405)
    5 : (30)
    dense vector OK

    Numeric object:  OK


L: column-form matrix, n_row 5 n_col 5, nz = 7. 

    column 1: start: 0 end: 1 entries: 2
	row 1 : (1)
	row 4 : (6.5)

    column 2: start: 2 end: 2 entries: 1
	row 2 : (1)

    column 3: start: 3 end: 4 entries: 2
	row 3 : (1)
	row 4 : (0.27027)

    column 4: start: 5 end: 5 entries: 1
	row 4 : (1)

    column 5: start: 6 end: 6 entries: 1
	row 5 : (1)
    column-form matrix OK


U: column-form matrix, n_row 5 n_col 5, nz = 11. 

    column 1: start: 0 end: 0 entries: 1
	row 1 : (2)

    column 2: start: 1 end: 1 entries: 1
	row 2 : (18)

    column 3: start: 2 end: 3 entries: 2
	row 2 : (18)
	row 3 : (37)

    column 4: start: 4 end: 7 entries: 4
	row 1 : (2)
	row 2 : (23)
	row 3 : (39)
	row 4 : (-23.5405)

    column 5: start: 8 end: 10 entries: 3
	row 2 : (15)
	row 4 : (7)
	row 5 : (30)
    column-form matrix OK


P: permutation vector, n = 5. 
    1 : 1 
    2 : 3 
    3 : 5 
    4 : 2 
    5 : 4 
    permutation vector OK


Q: permutation vector, n = 5. 
    1 : 1 
    2 : 4 
    3 : 5 
    4 : 2 
    5 : 3 
    permutation vector OK


UMFPACK V4.0 (Apr 11, 2002), Info:
    matrix entry defined as: double
    Int (generic integer) defined as: int
    BLAS library used: built-in MATLAB BLAS.
    MATLAB: yes.
    CPU timer: getrusage.
    number of rows in input matrix:   5
    number of colums in input matrix: 5
    entries in input matrix:          12
    memory usage is reported below in 8-byte Units
    size of int:  4 bytes
    size of long:  4 bytes
    size of pointer:  4 bytes
    size of numerical entry:  8 bytes
    symbolic/numeric factorization:         estimate               actual      %
    number of "dense" rows                         -                    0      -
    rows with entries only in "dense" columns      -                    0      -
    number of "dense" columns                      -                    0      -
    columns with entries only in "dense" rows      -                    0      -
    symbolic factorization defragmentations        -                    0      -
    symbolic memory usage (Units)                  -                  108      -
    Symbolic size (Units)                          -                   35      -
    symbolic factorization time (sec)              -                 0.00      -
    variable-sized part of Numeric object:
        initial size (Units)                     100                  100   100%
        peak size (Units)                        123                  100    81%
        final size (Units)                        21                   15    71%
    Numeric final size (Units)                    74                   65    88%
    peak memory usage (Units)                    275                  252    92%
    numeric factorization flops                   26                    6    23%
    nz in L (incl diagonal)                        9                    7    78%
    nz in U (incl diagonal)                       14                   11    79%
    nz in L+U (incl diagonal)                     18                   13    72%
    largest front (# entries)                     20                    4    20%
    nonzeros on diagonal of U                      -                    5      -
    estimate of reciprocal of condition number     -          5.40541e-02      -
    indices in compressed pattern                  -                    7      -
    numerical values stored in Numeric object      -                   13      -
    numeric factorization defragmentations         -                    1      -
    numeric factorization reallocations            -                    1      -
    costly numeric factorization reallocations     -                    0      -
    numeric factorization time (sec)               -                 0.00      -

Here are the LU factors of B:

L =

   (1,1)       1.0000
   (4,1)       6.5000
   (2,2)       1.0000
   (3,3)       1.0000
   (4,3)       0.2703
   (4,4)       1.0000
   (5,5)       1.0000


U =

   (1,1)       2.0000
   (2,2)      18.0000
   (2,3)      18.0000
   (3,3)      37.0000
   (1,4)       2.0000
   (2,4)      23.0000
   (3,4)      39.0000
   (4,4)     -23.5405
   (2,5)      15.0000
   (4,5)       7.0000
   (5,5)      30.0000


P =

     1     3     5     2     4


Q =

     1     4     5     2     3

B (P,Q) - L*U should be zero:

B (P,Q) - L*U =

ans =

   All zero sparse: 5-by-5

Solution to Ax=b via UMFPACK, using the factors of B:
    x = L' \ (U' \ b (Q)) ;
    x (P) = x ;

x =

    8.5012
   -0.6925
    0.1667
   -0.0218
    0.6196

Solution to Ax=b via MATLAB:

x =

    8.5012
   -0.6925
    0.1667
   -0.0218
    0.6196

Difference between UMFPACK and MATLAB solution:

ans =

   1.0e-15 *

         0
   -0.1110
   -0.1110
    0.1492
    0.1110

>> 
